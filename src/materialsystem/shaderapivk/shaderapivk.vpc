//-----------------------------------------------------------------------------
//	SHADERAPIVK.VPC
//
//	Project Script
//-----------------------------------------------------------------------------

$Macro SRCDIR		"..\.."
$Macro OUTBINDIR	"$SRCDIR\..\game\bin"
// '-shaderdll' launch option doesn't seem to do anything if materialsystem was not compiled in DEBUG mode.
// However, we can get the materialsystem to load our binary if we replace shaderapidx9, so let's do that for now.
$Macro OUTBINNAME	"shaderapidx9"

$Include "$SRCDIR\vpc_scripts\source_dll_base.vpc"

// Common Configuration
$Configuration
{
	$Compiler
	{
		$PreprocessorDefinitions		"$BASE;SHADERAPIVK;SHADER_DLL_EXPORT;PROTECTED_THINGS_ENABLE;strncpy=use_Q_strncpy_instead;_snprintf=use_Q_snprintf_instead"
		$AdditionalIncludeDirectories	"$BASE;$(VULKAN_SDK)/Include;$(VULKAN_SDK)/Third-Party/Include"
	}

	$Linker
	{
		$AdditionalDependencies			"$BASE $(VULKAN_SDK)/Lib32/vulkan-1.lib"
	}
	
	$PostBuildEvent [!$ANALYZE]
	{
		$CommandLine		"if not exist $QUOTE$OUTBINDIR$QUOTE mkdir $QUOTE$OUTBINDIR$QUOTE" "\n" 
		$CommandLine		"$BASE" "copy $QUOTE$(TargetDir)$(TargetFileName)$QUOTE $QUOTE$OUTBINDIR\$(TargetFileName)$QUOTE" "\n" \
							"if ERRORLEVEL 1 goto BuildEventFailed" "\n" \
							"if exist $QUOTE$(TargetDir)$(TargetName).map$QUOTE copy $QUOTE$(TargetDir)$(TargetName).map$QUOTE $OUTBINDIR\$(TargetName).map" "\n" 
		$CommandLine		"$BASE" "copy $QUOTE$(TargetDir)$(TargetName).pdb$QUOTE $OUTBINDIR\$(TargetName).pdb$QUOTE" "\n" \
							"if ERRORLEVEL 1 goto BuildEventFailed" "\n" \
							"goto BuildEventOK" "\n" \
							":BuildEventFailed" "\n" \
							"echo *** ERROR! PostBuildStep FAILED for $(ProjectName)! EXE or DLL is probably running. ***" "\n" \
							"del /q $QUOTE$(TargetDir)$(TargetFileName)$QUOTE" "\n" \
							"exit 1" "\n" \
							":BuildEventOK" "\n"

		$CommandLine		"$BASE" "\n" \
							"call $SRCDIR\devtools\bin\vsign.bat -sign $OUTBINDIR\$(TargetFileName)" "\n" [$RETAIL && $PUBLISH]

		$CommandLine		"$BASE" "\n" \
							"call $SRCDIR\devtools\bin\vsign.bat -signvalve $OUTBINDIR\$(TargetFileName)" "\n" [!$RETAIL && !$PUBLISH && !$SOURCESDK]
							
		$CommandLine		"$BASE" "\n" \
							"call $SRCDIR\materialsystem\shaderapivk\shaders\compile.bat" "\n" \
							"if ERRORLEVEL 1 goto ShaderBuildEventFailed" "\n" \
							"goto ShaderBuildEventOK" "\n" \
							":ShaderBuildEventFailed" "\n" \
							"echo *** ERROR! PostBuildStep FAILED for $(ProjectName)! Failed to build shaders. ***" "\n" \
							"exit 1" "\n" \
							":ShaderBuildEventOK" "\n"

		$Description		"Publishing to $OUTBINDIR"
		$ExcludedFromBuild	"No"
	}
}

$Configuration "DEBUG"
{
	$Linker
	{
		$AdditionalDependencies			"$BASE glslangd.lib HLSLd.lib OGLCompilerd.lib OSDependentd.lib SPIRVd.lib"
	}
	
	$Compiler
	{
		// Needed for glslangd.lib even with _ALLOW_ITERATOR_DEBUG_LEVEL_MISMATCH weirdly enough
		$PreprocessorDefinitions		"$BASE;_HAS_ITERATOR_DEBUGGING=1"
	}
}

$Configuration "RELEASE"
{
	$Linker
	{
		$AdditionalDependencies			"$BASE glslang.lib HLSL.lib OGLCompiler.lib OSDependent.lib SPIRV.lib"
	}
}

$Project "shaderapivk"
{
	$Folder	"Public Header Files"
	{
		$File	"$SRCDIR\public\shaderapi\ishaderdevice.h"
		$File	"$SRCDIR\public\shaderapi\ishaderutil.h"
		$File	"$SRCDIR\public\shaderapi\ishaderapi.h"
		$File	"$SRCDIR\public\shaderapi\ishaderdynamic.h"
		$File	"$SRCDIR\public\shaderapi\ishadershadow.h"
		$File	"$SRCDIR\public\materialsystem\idebugtextureinfo.h"
		$File	"$SRCDIR\public\materialsystem\ivballoctracker.h"
		$File	"$SRCDIR\public\materialsystem\shader_vcs_version.h"
	}

	$Folder	"Source Files"
	{
		$Folder "App System"
		{
			$File "shaderdevicemgrvk.cpp"
			$File "shaderdevicemgrvk.h"
 		}
		$Folder "Buffer"
		{
			$File "buffervkutil.h"
			$File "indexbuffervk.cpp"
			$File "indexbuffervk.h"
			$File "vertexbuffervk.cpp"
			$File "vertexbuffervk.h"			
		}
		$Folder "Device / Renderer"
		{
			$File "hardwareconfig.cpp"
			$File "hardwareconfig.h"
			$File "shaderapivk.cpp"
			$File "shaderapivk.h"
			$File "shaderdevicevk.cpp"
			$File "shaderdevicevk.h"
			$File "shadermanagervk.cpp"
			$File "shadermanagervk.h"
			$File "shadershadowvk.cpp"
			$File "shadershadowvk.h"
		}		
		$Folder "Mesh"
		{
			$File "meshmgrvk.cpp"
			$File "meshmgrvk.h"
			$File "meshvk.cpp"
			$File "meshvk.h"
		}
		$Folder "Shaders"
		{
			$File "shaders/shader.frag"
			$File "shaders/shader.vert"
			$File "shaders/compile.bat"
		}
		$Folder "Vertex"
		{
			$File "vertexvk.h"
		}
		$Folder "Vulkan Callbacks"
		{
			$File "vulkanimpl.cpp"
			$File "vulkanimpl.h"
		}
		$File "localvktypes.h"
		$File "shaderapivk_global.h"
	}

	$Folder	"Link Libraries"
	{
		$Lib "bitmap"
		$Lib "mathlib"
		$Lib "tier2"
		$Lib "$(VULKAN_SDK)/Lib32/vulkan-1"
		$Lib "glslang"
		$Lib "HLSL"
		$Lib "OGLCompiler"
		$Lib "OSDependent"
		$Lib "SPIRV"
		$Lib "glslangd"
		$Lib "HLSLd"
		$Lib "OGLCompilerd"
		$Lib "OSDependentd"
		$Lib "SPIRVd"
	}
}